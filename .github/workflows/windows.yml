name: Windows Build & Release

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # 1. Checkout source
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Cache vcpkg
      - name: Cache vcpkg directory
        uses: actions/cache@v4
        id: cache-vcpkg
        with:
          path: ./vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/build.rs') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # 3. Install & bootstrap vcpkg if not cached
      - name: Install & Bootstrap vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install gdal:x64-windows-release
          .\vcpkg\vcpkg install osg:x64-windows-release

      # 4. Build with Cargo (release)
      - name: Cargo build (release)
        run: cargo build --release --verbose

      # 5. Normalize exe name
      - name: Normalize exe name
        shell: pwsh
        run: |
          # find the built .exe (ignoring .dll files)
          $exe = Get-ChildItem target/release/*.exe | Where-Object { $_.Extension -eq '.exe' } | Select-Object -First 1
          Copy-Item $exe.FullName target/release/app.exe

      # 6. Create or update GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7. Upload only the normalized exe
      - name: Upload Release executable
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/app.exe
          asset_name: app.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
