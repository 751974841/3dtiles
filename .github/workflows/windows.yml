name: Windows Build & Release

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # 1. Checkout source
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Cache vcpkg
      - name: Cache vcpkg directory
        uses: actions/cache@v4
        id: cache-vcpkg
        with:
          path: ./vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/build.rs') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # 3. Install & Bootstrap vcpkg if needed
      - name: Install & Bootstrap vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install gdal:x64-windows-release
          .\vcpkg\vcpkg install osg:x64-windows-release

      # 4. Cargo build (release)
      - name: Cargo build (release)
        run: cargo build --release --verbose

      # 5. Compress the entire target/release folder
      - name: Compress target/release
        shell: pwsh
        run: |
          # 如果已有旧的压缩包就删除
          if (Test-Path 'release.zip') {
            Remove-Item 'release.zip'
          }
          # 将 target\release 下的所有文件和子目录打包到 release.zip
          Compress-Archive -Path target\release\* -DestinationPath release.zip

      # 6. Create GitHub Release and upload ZIP
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            本次 Release 包含了整个 `target/release` 目录下的所有编译产物：
            - 可执行文件（`.exe`）
            - 动态链接库（`.dll`）
            - 调试符号（`.pdb`，如果有）
            - 以及其他编译输出文件
          files: release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
