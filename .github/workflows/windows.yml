name: Windows Build & Release

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # 1. Checkout source
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Cache vcpkg
      - name: Cache vcpkg directory
        uses: actions/cache@v4
        id: cache-vcpkg
        with:
          path: ./vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/build.rs') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # 3. Install & Bootstrap vcpkg if needed
      - name: Install & Bootstrap vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install gdal:x64-windows-release
          .\vcpkg\vcpkg install osg:x64-windows-release

      # 4. Cargo build (release)
      - name: Cargo build (release)
        run: cargo build --release --verbose

      # 5. 准备 release 目录并复制所有运行时依赖
      - name: Prepare release directory
        shell: pwsh
        run: |
          # 清理旧目录
          if (Test-Path 'release') {
            Remove-Item -Recurse -Force 'release'
          }
          New-Item -ItemType Directory -Path release | Out-Null

          # 5.1 复制 Cargo 输出的 exe 和本地 dll
          Copy-Item target\release\*.exe release\ -ErrorAction SilentlyContinue
          Copy-Item target\release\*.dll release\ -ErrorAction SilentlyContinue

          # 5.2 复制 vcpkg 安装的所有运行时 DLL（遍历所有 triplet）
          Get-ChildItem -Directory vcpkg\installed | ForEach-Object {
            $bin = Join-Path $_.FullName 'bin'
            if (Test-Path $bin) {
              Copy-Item "$bin\*.dll" release\ -ErrorAction SilentlyContinue
            }
          }

          # （调试用）列出 release 目录内容
          Write-Host "=== Release folder contents ==="
          dir release\*

      # 6. 使用 PowerShell 自带的压缩功能打包
      - name: Compress release folder
        shell: pwsh
        run: |
          if (Test-Path 'release.zip') {
            Remove-Item 'release.zip'
          }
          Compress-Archive -Path release\* -DestinationPath release.zip

      # 7. 创建 Release 并上传 ZIP
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            **包含的文件类型：**
            - 可执行程序：`.exe`  
            - 本地动态库：`.dll`  
            - vcpkg 运行时库：`.dll`（GDAL、OSG 及其依赖）
          files: release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
