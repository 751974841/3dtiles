name: Windows Build & Release

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # 1. Checkout source
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Cache vcpkg
      - name: Cache vcpkg directory
        uses: actions/cache@v4
        id: cache-vcpkg
        with:
          path: ./vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/build.rs') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      # 3. Install & Bootstrap vcpkg if needed
      - name: Install & Bootstrap vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install gdal:x64-windows-release
          .\vcpkg\vcpkg install osg:x64-windows-release

      # 4. Cargo build (release)
      - name: Cargo build (release)
        run: cargo build --release --verbose

      # 5. 准备 release 目录并复制产物
      - name: Prepare release directory
        shell: pwsh
        run: |
          if (Test-Path 'release') {
            Remove-Item -Recurse -Force 'release'
          }
          New-Item -ItemType Directory -Path release | Out-Null

          # 把所有 exe 和 dll 复制进去
          Copy-Item target\release\*.exe release\
          Copy-Item target\release\*.dll release\

      # 6. 用 7‑Zip 打包
      - name: Compress with 7-Zip
        shell: pwsh
        run: |
          # -tzip 表示输出 ZIP 格式，release.zip 是目标压缩包
          & 7z a -tzip release.zip release\*

      # 7. 创建 Release 并上传 ZIP
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            **包含的文件类型：**
            - 可执行程序：`.exe`
            - 动态链接库：`.dll`
          files: release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
